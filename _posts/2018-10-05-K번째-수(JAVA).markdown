---
layout: post
title:  "K번째 수(JAVA)"
date:   2018-10-05 09:30:10 +0900
categories: 알고리즘
---
#### ＃ 문제 ####
[**K번째 수**](https://programmers.co.kr/learn/courses/30/lessons/42748?)
<details><summary >문제 보기</summary>
<div style="font-size:0.7em;">
<div class="markdown solarized-dark"><p>배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.</p>

<p>예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면</p>

<ol>
<li>array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.</li>
<li>1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.</li>
<li>2에서 나온 배열의 3번째 숫자는 5입니다.</li>
</ol>

<p>배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>

<h5>제한사항</h5>

<ul>
<li>array의 길이는 1 이상 100 이하입니다.</li>
<li>array의 각 원소는 1 이상 100 이하입니다.</li>
<li>commands의 길이는 1 이상 50 이하입니다.</li>
<li>commands의 각 원소는 길이가 3입니다.</li>
</ul>

<h5>입출력 예</h5>
<table class="table">
      <thead><tr>
<th>array</th>
<th>commands</th>
<th>return</th>
</tr>
</thead>
      <tbody><tr>
<td>[1, 5, 2, 6, 3, 7, 4]</td>
<td>[[2, 5, 3], [4, 4, 1], [1, 7, 3]]</td>
<td>[5, 6, 3]</td>
</tr>
</tbody>
    </table>
<h5>입출력 예 설명</h5>

<p>[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.<br>
[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.<br>
[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.</p>

</div>
</div>
</details>

<br>
<br>

#### # 풀이
Arrays를 임포트해서 arraycopy랑 sort를 사용해서 간단하게 풀었당.<br>
- arraycopy(Object src, int srcPos, Object dest, int destPos, int length)
    - src는 복사할 배열, srcPos는 시작 인덱스, dest는 옮길 배열, destPos는 dest의 몇 번째 인덱스부터 복사 할 건지, length는 가져올 길이
- public static void sort(int[] a)
    - 시간복잡도는 O(n log(n)), 오름차순으로 정렬된다.


##### **코드** #####


```
import java.util.Arrays;

class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = new int[commands.length];
        for(int i=0;i<commands.length;i++){
        	int start = commands[i][0];
        	int end = commands[i][1];
        	int num = commands[i][2];
        	int[] arr_copy=new int[end-start+1];
        	System.arraycopy(array, start-1, arr_copy, 0, end-start+1);

        	Arrays.sort(arr_copy);
        	answer[i]=arr_copy[num-1];
        }
        return answer;
    }
}

```
