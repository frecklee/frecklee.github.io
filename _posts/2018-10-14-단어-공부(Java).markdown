---
layout: post
title:  "[1157]단어 공부(JAVA)"
date:   2018-10-14 00:20:00 +0900
categories: 알고리즘
---
#### ＃ 문제
[백준]
#### [[1157]단어 공부](https://www.acmicpc.net/problem/1157)  

<details><summary >문제 보기</summary>

<div id="problem-body">
<div class="col-md-12">
<section id="description">
<div class="headline">
<h5># 문제</h5>
</div>
<div style="font-size:small; line-height:30px;" id="problem_description">
<p>알파벳 대소문자로 된 단어가 주어지면, 이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오. 단, 대문자와 소문자를 구분하지 않는다.</p><br>

</div>
</section>
</div>
<div class="col-md-12">
<section id="input">
<div class="headline">
<h5># 입력</h5>
</div>
<div style="font-size:small; line-height:30px;" id="problem_input">
<p>첫째 줄에 알파벳 대소문자로 이루어진 단어가 주어진다. 주어지는 단어의 길이는 1,000,000을 넘지 않는다.</p><br>

</div>
</section>
</div>

<div class="col-md-12">
<section id="output">
<div class="headline">
<h5># 출력</h5>
</div>
<div style="font-size:small; line-height:30px;" id="problem_output">
<p># 첫째 줄에 이 단어에서 가장 많이 사용된 알파벳을 대문자로 출력한다. 단, 가장 많이 사용된 알파벳이 여러 개 존재하는 경우에는 ?를 출력한다.</p>
<br>
</div>
</section>
</div>

</div>
</section>
</div>
</div>

</details>  

<br>  

#### # 풀이 ####  

| 메모리 | 시간 |
|-------|------|
| 23076KB | 220 ms |


이유를 모르지만 이번에 처음에 짠 코드가 얼마나 그지같았는지 메모리를 105460KB이나 차지했다. 이상.. 그래서 바로 고쳤다. 버퍼드리더로 고치고 스트링을 또 쪼갰었는데 split했던 부분을 지우고 이번에는 다시 합쳤다. 이렇게만 했는데 메모리도 많이 줄고 시간도 많이 줄어서 그냥 코드를 올렸다. 원래는 더 줄여야 할 부분이 있겠지만 너무 피곤쓰.. 우선 받은 알파벳을 대문자로 전환하고, 알파벳 배열을 하나 줬다. 알파벳이 26개니까 26개로. 으흐음 긔리고 단어의 i번째 글자를 알파벳 배열의 인덱스로 잡아서 증가했다. 왜 증가하냐면 알파벳이 몇 갠지 알아야 하니까! 그리고 다시 포문을 돌려서 max값을 찾았다. max값인 경우에는 인덱스를 max_index로 바꿔주고(출력을 위해), max 글자가 여러개면 안 되니까 max_count를 통해 1보다 크면 ?을 출력하고 아닌 경우에는 아까 저장한 max_index를 이용하여 알파벳을 출력했다.  

 <br>  

- **코드**


```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String s = br.readLine().toUpperCase().trim();
		int[] alphabet = new int[26];
		for (int i = 0; i < s.length(); i++) {
			alphabet[s.charAt(i) - 65] += 1;
		}
		int max = -1;
		int max_count = 0;
		int max_index = -1;
		for (int i = 0; i < alphabet.length; i++) {
			if (alphabet[i] > max) {
				max = alphabet[i];
				max_count = 1;
				max_index = i;
			} else if (alphabet[i] == max) {
				max_count++;
			} else
				;
		}
		if (max_count > 1)
			System.out.println("?");
		else
			System.out.println((char) (max_index + 65));
	}

}
```
